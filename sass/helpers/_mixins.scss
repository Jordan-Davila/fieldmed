/*** Button mixins ***/

/**
 * Generate button style
 * @param {String} - $name - required
 * @param {String} - $background - required - format accepted: hsla, rgb, #
 * @param {Strong} - $type - optionnal - format accepted: hsla, rgb, #
 * If no $color specify, the 'set-text-color' function is called
 * go check the _function.scss
 */
@mixin generate-button($name, $background, $border) {
    .button-#{$name} {
        @if (length($background) <= 1) {
            background-color: $background;
            &:hover {
                color: $color-white !important;
            }
        } @else {
            background: linear-gradient(90deg, nth($background, 1) 0%, nth($background, 2) 100%);
            &:hover {
                color: $color-white !important;
            }
        }

        @if ($border != none) {
            border: 2px solid $border;
        }

        @include links1;
        border-radius: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 5px 10px;
        min-width: 100px;
        color: $color-white !important;
        outline: none;
        cursor: pointer;

        i {
            margin-left: 5px;
            font-size: 8px;
        }
    }
}

/**
 * Generate Font-Face
 */

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
    $src: null;

    $extmods: (
        eot: "?",
        svg: "#" + str-replace($name, " ", "_")
    );

    $formats: (
        otf: "opentype",
        ttf: "truetype"
    );

    @each $ext in $exts {
        $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
    }

    @font-face {
        font-family: quote($name);
        font-style: $style;
        font-weight: $weight;
        src: $src;
    }
}
